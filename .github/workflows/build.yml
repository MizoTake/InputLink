name: Build and Release

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Run linting
      run: |
        ruff check src tests
        black --check src tests
        isort --check-only src tests
    
    - name: Run type checking
      run: mypy src
    
    - name: Run tests
      run: pytest tests/ --cov=src/input_link --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'

  build-windows:
    needs: test
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[build]"
    
    - name: Build Windows executables
      run: python build\build.py
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-executables
        path: |
          dist/InputLink-Sender.exe
          dist/InputLink-Receiver.exe

  build-macos:
    needs: test
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[build]"
    
    - name: Build macOS applications
      run: python build/build.py
    
    - name: Create DMG installer
      run: python build/installer/create_macos_dmg.py
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macos-applications
        path: |
          dist/InputLink-Sender.app
          dist/InputLink-Receiver.app
          InputLink-*.dmg

  release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get tag name
      id: tag
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Download Windows artifacts
      uses: actions/download-artifact@v3
      with:
        name: windows-executables
        path: dist/windows/
    
    - name: Download macOS artifacts
      uses: actions/download-artifact@v3
      with:
        name: macos-applications
        path: dist/macos/
    
    - name: Create release archives
      run: |
        cd dist
        
        # Create Windows archive
        zip -r "InputLink-${{ steps.tag.outputs.TAG_NAME }}-Windows.zip" windows/
        
        # Create macOS archive
        tar -czf "InputLink-${{ steps.tag.outputs.TAG_NAME }}-macOS.tar.gz" -C macos .
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/InputLink-${{ steps.tag.outputs.TAG_NAME }}-Windows.zip
          dist/InputLink-${{ steps.tag.outputs.TAG_NAME }}-macOS.tar.gz
          dist/macos/InputLink-*.dmg
        draft: false
        prerelease: ${{ contains(steps.tag.outputs.TAG_NAME, 'beta') || contains(steps.tag.outputs.TAG_NAME, 'alpha') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
